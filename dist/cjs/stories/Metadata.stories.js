"use strict";
/*!
 * The contents of this file are subject to the Common Public Attribution License Version 1.0 (the “License”); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://mpapp-public.gitlab.io/manuscripts-frontend/LICENSE. The License is based on the Mozilla Public License Version 1.1 but Sections 14 and 15 have been added to cover use of software over a computer network and provide for limited attribution for the Original Developer. In addition, Exhibit A has been modified to be consistent with Exhibit B.
 *
 * Software distributed under the License is distributed on an “AS IS” basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for the specific language governing rights and limitations under the License.
 *
 * The Original Code is manuscripts-frontend.
 *
 * The Original Developer is the Initial Developer. The Initial Developer of the Original Code is Atypon Systems LLC.
 *
 * All portions of the code written by Atypon Systems LLC are Copyright (c) 2019 Atypon Systems LLC. All Rights Reserved.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const title_editor_1 = require("@manuscripts/title-editor");
const addon_actions_1 = require("@storybook/addon-actions");
const react_1 = require("@storybook/react");
const react_2 = __importDefault(require("react"));
const CollaboratorsPage_1 = require("../src/components/collaboration/CollaboratorsPage");
const AddAuthorButton_1 = __importDefault(require("../src/components/metadata/AddAuthorButton"));
const AddAuthorsSidebar_1 = __importDefault(require("../src/components/metadata/AddAuthorsSidebar"));
const AuthorFormContainer_1 = require("../src/components/metadata/AuthorFormContainer");
const AuthorsModals_1 = require("../src/components/metadata/AuthorsModals");
const AuthorsSidebar_1 = __importDefault(require("../src/components/metadata/AuthorsSidebar"));
const SearchAuthorsSidebar_1 = __importDefault(require("../src/components/metadata/SearchAuthorsSidebar"));
const authors_1 = require("../src/lib/authors");
const contributors_1 = require("./data/contributors");
const projects_1 = require("./data/projects");
const affiliationIds = authors_1.buildSortedAffiliationIDs(contributors_1.authors);
const authorAffiliations = authors_1.buildAuthorAffiliations(contributors_1.authors, contributors_1.affiliations, affiliationIds);
react_1.storiesOf('Metadata', module)
    .add('Title: read-only', () => (react_2.default.createElement(title_editor_1.Title, { value: 'Landscape genomic prediction for restoration of a <em>Eucalyptus</em> foundation species under climate change' })))
    .add('Title: write', () => (react_2.default.createElement(title_editor_1.TitleField, { value: 'Landscape genomic prediction for restoration of a <em>Eucalyptus</em> foundation species under climate change' })))
    .add('Authors Modal', () => (react_2.default.createElement(AuthorsModals_1.AuthorsModal, { affiliations: contributors_1.affiliations, authorAffiliations: authorAffiliations, handleSaveAuthor: addon_actions_1.action('save author'), addAuthorAffiliation: addon_actions_1.action('add affiliation to select author (if string: create it)'), removeAuthorAffiliation: addon_actions_1.action('remove affiliation from selected author'), updateAffiliation: addon_actions_1.action('upate the affiliation'), isRemoveAuthorOpen: false, removeAuthor: addon_actions_1.action('remove author'), handleRemoveAuthor: addon_actions_1.action('handle open the remove author confirmation dialog'), isRejected: addon_actions_1.action('check invitation existence'), project: projects_1.project, updateAuthor: addon_actions_1.action('update author after inviting him to collaborate on project'), getAuthorName: addon_actions_1.action('get the author name'), authors: contributors_1.authors, selectAuthor: addon_actions_1.action('select author'), selectedAuthor: null, handleDrop: addon_actions_1.action('dropped the user'), openAddAuthors: addon_actions_1.action('start adding'), tokenActions: {
        delete: addon_actions_1.action('delete token'),
        update: addon_actions_1.action('update token'),
    }, invitationSent: false, handleDismiss: addon_actions_1.action('dismiss message'), contributorRoles: [], createContributorRole: addon_actions_1.action('create contributor role'), allowInvitingAuthors: true })))
    .add('Authors Sidebar', () => (react_2.default.createElement(AuthorsSidebar_1.default, { authors: contributors_1.authors, authorAffiliations: authorAffiliations, selectAuthor: addon_actions_1.action('select author'), selectedAuthor: null, openAddAuthors: addon_actions_1.action('start adding'), handleDrop: addon_actions_1.action('dropped the user'), invitationSent: false, handleDismiss: addon_actions_1.action('dismiss message') })))
    .add('Authors Sidebar with decorations', () => (react_2.default.createElement(AuthorsSidebar_1.default, { authors: contributors_1.authors, authorAffiliations: authorAffiliations, selectAuthor: addon_actions_1.action('select author'), selectedAuthor: null, getSidebarItemDecorator: () => react_2.default.createElement("span", null, "Ain't Afraid"), openAddAuthors: addon_actions_1.action('start adding'), handleDrop: addon_actions_1.action('dropped the user'), invitationSent: false, handleDismiss: addon_actions_1.action('dismiss message') })))
    .add('Author Form', () => (react_2.default.createElement(AuthorFormContainer_1.AuthorFormContainer, { author: contributors_1.authors[0], affiliations: contributors_1.affiliations, authorAffiliations: authorAffiliations.get(contributors_1.authors[0]._id), handleSave: addon_actions_1.action('save author'), addAuthorAffiliation: addon_actions_1.action('add affiliation to select author (if string: create it)'), removeAuthorAffiliation: addon_actions_1.action('remove affiliation from selected author'), updateAffiliation: addon_actions_1.action('upate the affiliation'), isRemoveAuthorOpen: false, removeAuthor: addon_actions_1.action('remove author'), handleRemoveAuthor: addon_actions_1.action('handle open the remove author confirmation dialog'), isRejected: addon_actions_1.action('check invitation existence'), project: projects_1.project, updateAuthor: addon_actions_1.action('update author after inviting him to collaborate on project'), getAuthorName: addon_actions_1.action('get the author name'), tokenActions: {
        delete: addon_actions_1.action('delete token'),
        update: addon_actions_1.action('update token'),
    }, contributorRoles: [], createContributorRole: addon_actions_1.action('create contributor role'), allowInvitingAuthors: true })))
    .add('Add Authors Sidebar', () => (react_2.default.createElement(AddAuthorsSidebar_1.default, { nonAuthors: [], numberOfAddedAuthors: 0, isSearching: false, searchText: '', addedAuthors: [], handleDoneCancel: addon_actions_1.action('stop adding'), createAuthor: addon_actions_1.action('create author'), handleSearchChange: addon_actions_1.action('update search text'), handleSearchFocus: addon_actions_1.action('start searching'), searchResults: [], handleInvite: addon_actions_1.action('start invite'), authors: contributors_1.authors, isAuthorExist: addon_actions_1.action('check author existence'), isCreateAuthorOpen: false, handleCreateAuthor: addon_actions_1.action('handle open the create author confirmation dialog') })))
    .add('Add Authors Sidebar with suggested users', () => (react_2.default.createElement(AddAuthorsSidebar_1.default, { nonAuthors: [contributors_1.user], numberOfAddedAuthors: 0, isSearching: false, searchText: '', addedAuthors: [], handleDoneCancel: addon_actions_1.action('stop adding'), createAuthor: addon_actions_1.action('create author'), handleSearchChange: addon_actions_1.action('update search text'), handleSearchFocus: addon_actions_1.action('start searching'), searchResults: [], handleInvite: addon_actions_1.action('start invite'), authors: contributors_1.authors, isAuthorExist: addon_actions_1.action('check author existence'), isCreateAuthorOpen: false, handleCreateAuthor: addon_actions_1.action('handle open the create author confirmation dialog') })))
    .add('Add Authors Sidebar - Searching', () => (react_2.default.createElement(AddAuthorsSidebar_1.default, { nonAuthors: [], numberOfAddedAuthors: 1, isSearching: true, searchText: 'notFound', addedAuthors: [], handleDoneCancel: addon_actions_1.action('stop adding'), createAuthor: addon_actions_1.action('create author'), handleSearchChange: addon_actions_1.action('update search text'), handleSearchFocus: addon_actions_1.action('start searching'), searchResults: [], handleInvite: addon_actions_1.action('start invite'), authors: contributors_1.authors, isAuthorExist: addon_actions_1.action('check author existence'), isCreateAuthorOpen: false, handleCreateAuthor: addon_actions_1.action('handle open the create author confirmation dialog') })))
    .add('Add Authors Sidebar - Create author', () => (react_2.default.createElement(AddAuthorsSidebar_1.default, { nonAuthors: [], numberOfAddedAuthors: 1, isSearching: true, searchText: 'notFound', addedAuthors: [], handleDoneCancel: addon_actions_1.action('stop adding'), createAuthor: addon_actions_1.action('create author'), handleSearchChange: addon_actions_1.action('update search text'), handleSearchFocus: addon_actions_1.action('start searching'), searchResults: [], handleInvite: addon_actions_1.action('start invite'), authors: contributors_1.authors, isAuthorExist: addon_actions_1.action('check author existence'), isCreateAuthorOpen: true, handleCreateAuthor: addon_actions_1.action('handle open the create author confirmation dialog') })))
    .add('Search Authors Sidebar', () => (react_2.default.createElement(SearchAuthorsSidebar_1.default, { searchText: 'notFound', addedAuthors: [], createAuthor: addon_actions_1.action('create author'), searchResults: [], handleInvite: addon_actions_1.action('start invite'), authors: contributors_1.authors, isAuthorExist: addon_actions_1.action('check author existence'), handleCreateAuthor: addon_actions_1.action('handle open the create author confirmation dialog') })))
    .add('Search Authors Sidebar - search email', () => (react_2.default.createElement(SearchAuthorsSidebar_1.default, { searchText: 'notFound@atypon.com', addedAuthors: [], createAuthor: addon_actions_1.action('create author'), searchResults: [], handleInvite: addon_actions_1.action('start invite'), authors: contributors_1.authors, isAuthorExist: addon_actions_1.action('check author existence'), handleCreateAuthor: addon_actions_1.action('handle open the create author confirmation dialog') })))
    .add('Search Authors Sidebar - Search with results', () => (react_2.default.createElement(SearchAuthorsSidebar_1.default, { searchText: contributors_1.user.bibliographicName.given, addedAuthors: [], createAuthor: addon_actions_1.action('create author'), searchResults: [contributors_1.user], handleInvite: addon_actions_1.action('start invite'), authors: contributors_1.authors, isAuthorExist: addon_actions_1.action('check author existence'), handleCreateAuthor: addon_actions_1.action('handle open the create author confirmation dialog') })))
    .add('Add Author Button', () => (react_2.default.createElement(AddAuthorButton_1.default, { person: contributors_1.user, authors: contributors_1.authors, createAuthor: addon_actions_1.action('create author') })))
    .add('Add Authors Page', () => react_2.default.createElement(CollaboratorsPage_1.AddAuthorsPage, { addedAuthorsCount: 3 }))
    .add('Author Details Page ', () => react_2.default.createElement(CollaboratorsPage_1.AuthorDetailsPage, null));
//# sourceMappingURL=Metadata.stories.js.map